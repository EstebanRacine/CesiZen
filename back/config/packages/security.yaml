security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/login
            stateless: true
            security: false  # Permet l'accès anonyme à notre endpoint de login

        api:
            pattern:   ^/api
            stateless: true
            jwt: ~
        
        main:
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Documentation API - accès public
        - { path: ^/api/doc, roles: PUBLIC_ACCESS }
        
        # Authentification - accès public
        - { path: ^/api/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        
        # Listing des infos et menus - accès public
        - { path: ^/api/info$, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/info/\d+$, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/info/menu/\d+$, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/menu$, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/menu/\d+$, roles: PUBLIC_ACCESS, methods: [GET] }
        
        # Gestion des infos - admin uniquement pour CUD (Create, Update, Delete)
        - { path: ^/api/info, roles: ROLE_ADMIN, methods: [POST, PUT, PATCH, DELETE] }
        
        # Gestion des menus - admin uniquement pour CUD
        - { path: ^/api/menu, roles: ROLE_ADMIN, methods: [POST, PUT, PATCH, DELETE] }
        
        # Tracker - utilisateur connecté requis
        - { path: ^/api/tracker, roles: ROLE_USER }
        
        # Profil utilisateur - utilisateur connecté requis
        - { path: ^/api/profile, roles: ROLE_USER }
        
        # Routes admin des utilisateurs - admin uniquement
        - { path: ^/api/user/admin, roles: ROLE_ADMIN }
        
        # Autres routes utilisateur (reset password, etc.) - utilisateur connecté
        - { path: ^/api/user, roles: ROLE_USER }
        
        # Gestion des utilisateurs - admin uniquement (legacy)
        - { path: ^/api/users, roles: ROLE_ADMIN }
        
        # Toutes les autres routes API - utilisateur connecté par défaut
        - { path: ^/api, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
